% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ct_plot_overlay.R
\name{ct_plot_overlay}
\alias{ct_plot_overlay}
\title{Overlay multiple data sets onto a single concentration-time graph}
\usage{
ct_plot_overlay(
  ct_dataframe,
  obs_to_sim_assignment = NA,
  mean_type = "arithmetic",
  figure_type = "means only",
  linear_or_log = "semi-log",
  colorBy_column,
  color_labels = NA,
  legend_label_color = NA,
  color_set = "default",
  obs_shape = NA,
  obs_color = NA,
  obs_size = NA,
  obs_fill_trans = NA,
  obs_line_trans = NA,
  linetype_column,
  linetypes = c("solid", "dashed"),
  line_width = NA,
  legend_label_linetype = NA,
  facet1_column,
  facet2_column,
  facet_ncol = NA,
  facet_nrow = NA,
  floating_facet_scale = FALSE,
  facet_spacing = NA,
  time_range = NA,
  x_axis_interval = NA,
  x_axis_label = NA,
  pad_x_axis = TRUE,
  pad_y_axis = TRUE,
  y_axis_limits_lin = NA,
  y_axis_limits_log = NA,
  y_axis_label = NA,
  graph_labels = TRUE,
  graph_title = NA,
  graph_title_size = 14,
  legend_position = NA,
  prettify_compound_names = TRUE,
  save_graph = NA,
  fig_height = 6,
  fig_width = 5
)
}
\arguments{
\item{ct_dataframe}{the input concentration-time data generated by running
the function \code{\link{extractConcTime_mult}} or
\code{\link{extractConcTime}}. Not quoted.}

\item{obs_to_sim_assignment}{optionally specify which observed files should
be compared to which simulator files. If left as NA and what you supplied
for \code{ct_dataframe} doesn't already specify which observed data go with
which simulated file, this will assume that \emph{all} observed data goes
with \emph{all} simulated data. To specify, use a named character vector
like this: \code{obs_to_sim_assignment = c("obs data 1.xlsx" =
"mdz-5mg-qd.xlsx", "obs data 2.xlsx" = "mdz-5mg-qd-cancer.xlsx")} If one
observed file needs to match more than one simulated file but not
\emph{all} the simulated files, you can do that by separating the simulated
files with commas, e.g., \code{obs_to_sim_assignment = c("obs data 1.xlsx"
= "mdz-5mg-qd.xlsx, mdz-5mg-qd-fa08.xlsx", "obs data 2.xlsx" =
"mdz-5mg-qd-cancer.xlsx, mdz-5mg-qd-cancer-fa08.xlsx")}. Pay close
attention to the position of commas and quotes there!}

\item{mean_type}{plot "arithmetic" (default) or "geometric" mean
concentrations or "median" concentrations as the main (thickest or only)
line for each data set. If this aggregate measure is not available in the
simulator output, you'll receive a warning message and we'll plot one that
\emph{is} available.}

\item{figure_type}{the type of figure to plot. \describe{

  \item{"means only"}{(default) show only the mean, geometric mean, or median
  (whatever you chose for "mean_type")}

  \item{"percentiles"}{plots an opaque line for the mean data and lighter
  lines for the 5th and 95th percentiles of the simulated data}

  \item{"percentile ribbon"}{show an opaque line for the mean data and
  transparent shading for the 5th to 95th percentiles. Note: You may
  sometimes see some artifacts -- especially for semi-log plots -- where the
  ribbon gets partly cut off. For arcane reasons we don't want to bore you
  with here, we can't easily prevent this. To fix this, increase your y axis
  limits for the semi-log plot.}}}

\item{linear_or_log}{the type of graph to be returned. Options: \describe{
  \item{"semi-log"}{y axis is log transformed; this is the default}

  \item{"linear"}{no axis transformation}

  \item{"both vertical"}{both the linear and the semi-log graphs will be
  returned, and graphs are stacked vertically}

  \item{"both horizontal"}{both the linear and the semi-log graphs will be
  returned, and graphs are stacked horizontally}}}

\item{colorBy_column}{(optional) the column in \code{ct_dataframe} that
should be used for determining which color lines and/or points will be.
This should be unquoted, e.g., \code{colorBy_column = Tissue}.}

\item{color_labels}{optionally specify a character vector for how you'd like
the labels for whatever you choose for \code{colorBy_column} to show up in
the legend. For example, use \code{c("file 1.xlsx" = "fa 0.5", "file
2.xlsx" = "fa 0.2")} to indicate that "file 1.xlsx" is for an fa of 0.5 and
"file 2.xlsx" is for an fa of 0.2. The order in the legend will match the
order designated here.}

\item{legend_label_color}{optionally indicate on the legend something
explanatory about what the colors represent. For example, if
\code{colorBy_column = File} and \code{legend_label_color = "Simulations
with various fa values"}, that will make the label above the file names in
the legend more explanatory than just "File". The default is to use
whatever the column name is for \code{colorBy_column}. If you don't want a
label for this legend item, set this to "none".}

\item{color_set}{the set of colors to use. Options: \describe{

  \item{"default"}{a set of colors from Cynthia Brewer et al. from Penn State
  that are friendly to those with red-green colorblindness. The first three
  colors are green, orange, and purple. This can also be referred to as
  "Brewer set 2". If there are only two unique values in the colorBy_column,
  then Brewer set 1 will be used since red and blue are still easily
  distinguishable but also more aesthetically pleasing than green and
  orange.}

  \item{"Brewer set 1"}{colors selected from the Brewer palette "set 1". The
  first three colors are red, blue, and green.}

  \item{"ggplot2 default"}{the default set of colors used in ggplot2 graphs
  (ggplot2 is an R package for graphing.)}

  \item{"rainbow"}{colors selected from a rainbow palette. The default
  palette is limited to something like 6 colors, so if you have more than
  that, that's when this palette is most useful. It's \emph{not} very useful
  when you only need a couple of colors.}

  \item{"blue-green"}{a set of blues fading into greens. This palette can be
  especially useful if you are comparing a systematic change in some
  continuous variable -- for example, increasing dose or predicting how a
  change in intrinsic solubility will affect concentration-time profiles --
  because the direction of the trend will be clear.}

  \item{"blues"}{a set of blues fading light blue to dark blue. Like
  "blue-green", this palette can be especially useful if you are comparing a
  systematic change in some continuous variable.}

  \item{"Tableau"}{uses the standard Tableau palette; requires the "ggthemes"
  package}

  \item{"viridis"}{from the eponymous package by Simon Garnier and ranges
  colors from purple to blue to green to yellow in a manner that is
  "printer-friendly, perceptually uniform and easy to read by those with
  colorblindness", according to the package author}

  \item{a character vector of colors}{If you'd prefer to set all the colors
  yourself to \emph{exactly} the colors you want, you can specify those
  colors here. An example of how the syntax should look: \code{color_set =
  c("dodgerblue3", "purple", "#D8212D")} or, if you want to specify exactly
  which item in \code{colorBy_column} gets which color, you can supply a
  named vector. For example, if you're coloring the lines by the compound ID,
  you could do this: \code{color_set = c("substrate" = "dodgerblue3",
  "inhibitor 1" = "purple", "primary metabolite 1" = "#D8212D")}. If you'd
  like help creating a specific gradation of colors, please talk to a member
  of the R Working Group about how to do that using
  \link{colorRampPalette}.}}}

\item{obs_shape}{optionally specify what shapes are used to depict observed
data for a) the substrate drug alone and b) the substrate drug in the
presence of an effector. Input should look like this, for example:
\code{c(1, 2)} to get an open circle for the substrate and an open triangle
for the substrate in the presence of effectors, if there are any. If you
only specify one value, it will be used for both substrate with and without
effectors. To see all the possible shapes and what number corresponds to
which shape, type \code{ggpubr::show_point_shapes()} into the console. If
left as NA, substrate alone will be an open circle and substrate +
inhibitor 1 will be an open triangle.}

\item{obs_color}{optionally specify a color to use for observed data if the
color isn't already mapped to a specific column. By default, observed data
will be the same color as whatever else matches those observed data in
\code{colorBy_column}, so if you have colored by compound ID, for example,
the observed data will also be colored by compound ID. If you have one
observed file that you're comparing to multiple simulation files (this is
what ct_plot_overlay will do if "File" is NA for the observed data), then
the observed data will all be black by default, or you could set that color
to be, say, a lovely purple by setting this: \code{obs_color =
"darkorchid4"}. Hex color codes are also ok to use, and setting this to
"none" will remove observed data from the graph.}

\item{obs_size}{optionally specify the size of the points to use for the
observed data. If left as NA, the size will be 2.}

\item{obs_fill_trans}{optionally specify the transparency for the fill of the
observed data points, which can be helpful when you have a lot of points
overlapping. This only applies when you have specified a value for
\code{obs_color} and when \code{obs_shape} is a shape that has a fill
(example: \code{obs_shape = 21} for a filled circle, which is the default).
Acceptable values are from 0 (fully transparent, so no fill at all) to 1
(completely opaque or black). If left as the default NA, the observed data
points will be 50 percent transparent, so the same as if this were set to
0.5.}

\item{obs_line_trans}{optionally specify the transparency for the outline of
the observed data points, which can be helpful when you have a lot of
points overlapping. Acceptable values are from 0 (fully transparent, so no
line at all) to 1 (completely opaque or black). If left as the default NA,
the observed data points will be opaque, so the same as if this were set to
1.}

\item{linetype_column}{the column in \code{ct_dataframe} that should be used
for determining the line types and also the shapes of the points for
depicting any observed data. For example, if \code{linetype_column} is set
to \code{Inhibitor}, then the default is to show a solid line (simulated
data) and an open circle (observed data) for no inhibitor being present and
then a dashed line (simulated data) and an open triangle (observed data)
when the inhibitor \emph{is} present. You can set which types of lines to
use with the argument \code{linetypes} and you can set which shapes of
points you want with the argument \code{obs_shape}.}

\item{linetypes}{the line types to use. Default is "solid" for all lines.
You'll need one line type for each possible value in the column you
specified for \code{linetype_column}. If you get a graph you didn't expect
as far as line types go, try checking what all the possible values are for
the column you specified for \code{linetype_column}. You can do this by
checking, e.g., \code{unique(CT$Inhibitor)} if your ct_dataframe was named
"CT" and the column you set for \code{linetype_column} was "Inhibitor". To
see possible line types by name, please enter
\code{ggpubr::show_line_types()} into the console.}

\item{line_width}{optionally specify how thick to make the lines. Acceptable
input is a number; the default is 1 for most lines and 0.8 for some, to
give you an idea of where to start.}

\item{legend_label_linetype}{optionally indicate on the legend something
explanatory about what the line types represent. For example, if
\code{linetype_column = Inhibitor} and \code{legend_label_linetype =
"Inhibitor present"}, that will make the label in the legend above, e.g.,
"none", and whatever effector was present more explanatory than just
"Inhibitor". The default is to use whatever the column name is for
\code{linetype_column}. If you don't want a label for this legend item, set
this to "none".}

\item{facet1_column}{optionally break up the graph into small multiples; this
specifies the first of up to two columns to break up the data by, and the
designated column name should be unquoted, e.g., \code{facet1_column =
Tissue}. If \code{floating_facet_scale} is FALSE and you haven't specified
\code{facet_ncol} or  \code{facet_nrow}, then \code{facet1_column} will
designate the rows of the output graphs.}

\item{facet2_column}{optionally break up the graph into small multiples; this
specifies the second of up to two columns to break up the data by, and the
designated column name should be unquoted, e.g., \code{facet2_column =
CompoundID}. If \code{floating_facet_scale} is FALSE and you haven't
specified \code{facet_ncol} or  \code{facet_nrow}, then
\code{facet2_column} will designate the columns of the output graphs.}

\item{facet_ncol}{optionally specify the number of columns of facetted graphs
you would like to have. This only applies when you have specified a column
for \code{facet1_column} and/or \code{facet2_column}.}

\item{facet_nrow}{optionally specify the number of rows of facetted graphs
you would like to have. This only applies when you have specified a column
for \code{facet1_column} and/or \code{facet2_column}.}

\item{floating_facet_scale}{TRUE or FALSE (default) for whether to allow the
axes for each facet of a multi-facetted graph to scale freely to best fit
whatever data are present. Default is FALSE, which means that all data will
be on the same scale for easy comparison. However, this could mean that
some graphs have lines that are hard to see, so you can set this to TRUE to
allow the axes to shrink or expand according to what data are present for
that facet. Floating axes comes with a trade-off for the looks of the
graphs, though: Setting this to TRUE does mean that your x axis won't
automatically have pretty breaks that are sensible for times in hours.}

\item{facet_spacing}{Optionally set the spacing between facets. If left as
NA, a best-guess as to a reasonable amount of space will be used. Units are
"lines", so try, e.g. \code{facet_spacing = 2}. (Reminder: Numeric data
should not be in quotes.)}

\item{time_range}{time range to display. Options: \describe{

  \item{NA}{entire time range of data; default}

  \item{a start time and end time in hours}{only data in that time range,
  e.g. \code{c(24, 48)}. Note that there are no quotes around numeric data.}

  \item{"first dose"}{only the time range of the first dose}

  \item{"last dose"}{only the time range of the last dose}

  \item{"penultimate dose"}{only the time range of the 2nd-to-last dose,
  which can be useful for BID data where the end of the simulation extended
  past the dosing interval or data when the substrate was dosed BID and the
  effector was dosed QD}

  \item{a specific dose number with "dose" or "doses" as the prefix}{the time
  range encompassing the requested doses, e.g., \code{time_range = "dose 3"}
  for the 3rd dose or \code{time_range = "doses 1 to 4"} for doses 1 to 4}

  \item{"all obs" or "all observed" if you feel like spelling it out}{Time
  range will be limited to only times when observed data are present.}

  \item{"last dose to last observed" or "last obs" for short}{Time range will
  be limited to the start of the last dose until the last observed data
  point.} }}

\item{x_axis_interval}{set the x-axis major tick-mark interval. Acceptable
input: any number or leave as NA to accept default values, which are
generally reasonable guesses as to aesthetically pleasing and PK-relevant
intervals.}

\item{x_axis_label}{optionally supply a character vector or an expression to
use for the x axis label}

\item{pad_x_axis}{optionally add a smidge of padding to the x axis (default
is TRUE, which includes some generally reasonable padding). If changed to
FALSE, the y axis will be placed right at the beginning of your time range
and all data will end \emph{exactly} at the end of the time range
specified. If you want a \emph{specific} amount of x-axis padding, set this
to a number; the default is \code{c(0.02, 0.04)}, which adds 2\% more space
to the left side and 4\% more space to the right side of the x axis. If you
only specify one number, padding is added to the left side.}

\item{pad_y_axis}{optionally add a smidge of padding to the y axis (default
is TRUE, which includes some generally reasonable padding). As with
\code{pad_x_axis}, if changed to FALSE, the x axis will be placed right at
the bottom of your data, possible cutting a point in half. If you want a
\emph{specific} amount of y-axis padding, set this to a number; the default
is \code{c(0.02, 0)}, which adds 2\% more space to the bottom and nothing
to the top of the y axis. If you only specify one number, padding is added
to the bottom.}

\item{y_axis_limits_lin}{Optionally set the Y axis limits for the linear
plot, e.g., \code{c(10, 1000)}. If left as NA, the Y axis limits for the
linear plot will be automatically selected. This only applies when you have
requested a linear plot with \code{linear_or_log}.}

\item{y_axis_limits_log}{Optionally set the Y axis limits for the semi-log
plot, e.g., \code{c(10, 1000)}. Values will be rounded down and up,
respectively, to the nearest order of magnitude. If left as NA, the Y axis
limits for the semi-log plot will be automatically selected. This only
applies when you have requested a semi-log plot with \code{linear_or_log}.}

\item{y_axis_label}{optionally supply a character vector or an expression to
use for the y axis label}

\item{graph_labels}{TRUE or FALSE for whether to include labels (A, B, C,
etc.) for each of the small graphs. (Not applicable if only outputting
linear or only semi-log graphs.)}

\item{graph_title}{optionally specify a title that will be centered across
your graph or set of graphs}

\item{graph_title_size}{the font size for the graph title if it's included;
default is 14. This also determines the font size of the graph labels.}

\item{legend_position}{Specify where you want the legend to be. Options are
"left", "right" (default in most scenarios), "bottom", "top", or "none" if
you don't want one at all.}

\item{prettify_compound_names}{set this to a) TRUE (default) or FALSE for
whether to make the compound names in the legend prettier or b) supply a
named character vector to set it to the exact name you'd prefer to see in
your legend. For example, \code{prettify_compound_names =
c("Sim-Ketoconazole-400 mg QD" = "ketoconazole", "Wks-Drug ABC-low_ka" =
"Drug ABC")} will make those compounds "ketoconazole" and "Drug ABC" in a
legend, and \code{prettify_compound_names = TRUE} will make some reasonable
guesses about what a prettier compound name should be. An example of
setting this to TRUE: "SV-Rifampicin-MD" would become "rifampicin", and
"Sim-Ketoconazole-200 mg BID" would become "ketoconazole".}

\item{save_graph}{optionally save the output graph by supplying a file name
in quotes here, e.g., "My conc time graph.png"or "My conc time graph.docx".
The nice thing about saving to Word is that the figure title and caption
text will be partly filled in automatically, although you should check that
the text makes sense in light of your exact graph. If you leave off ".png"
or ".docx", it will be saved as a png file, but if you specify a different
graphical file extension, it will be saved as that file format. Acceptable
graphical file extensions are "eps", "ps", "jpeg", "jpg", "tiff", "png",
"bmp", or "svg". Leaving this as NA means the file will not be
automatically saved to disk. \strong{WARNING:} SAVING TO WORD DOES NOT WORK
ON SHAREPOINT. This is a Microsoft permissions issue, not an R issue. If
you try to save on SharePoint, you will get a warning that R will save your
file instead to your Documents folder.}

\item{fig_height}{figure height in inches; default is 6}

\item{fig_width}{figure width in inches; default is 5}
}
\value{

}
\description{
\code{ct_plot_overlay} is meant to be used in conjunction with
\code{\link{extractConcTime_mult}} to create single graphs with overlaid
concentration-time data for multiple tissues, compounds, or Simcyp Simulator
output files for easy comparisons. \emph{Note:} There are some nuances to
overlaying observed data. Please see the "Details" section at the bottom of
this help file.
}
\details{
\strong{Notes on including observed data:} We recently added the option of
including observed data and are in the process of testing this. To include
observed data, you have two options: \enumerate{

\item{Use the Simulator Excel PE data entry template to save your observed
data. Then, when you run \code{\link{extractConcTime_mult}}, supply the names
of those Excel files to the observed data  function argument. This is the
BEST option because it contains the most information about the observed
data.}

\item{Include observed data in your simulation files. Those data will be
automatically extracted when you run \code{\link{extractConcTime_mult}} if
"obs_data_files" is left as the default NA. The drawback to this approach is
that it's not clear whether there was an inhibitor present, for example, or
which compound the data describe.} }

The \code{ct_plot_overlay} function will automatically figure out which
observed data should be compared with which simulated compound IDs, tissues,
etc. However, because the function doesn't know which simulator \emph{file}
goes with which observed data, it will assume that \emph{all} the observed
data are appropriate to compare to \emph{all} the files included in
\code{ct_dataframe} by default. If that's not the case, after you use
\code{\link{extractConcTime_mult}} to extract your data, you can indicate
which simulator output file goes with which observed file by setting the
simulator output file in the column "File". This admittedly requires a bit of
R knowledge, so please ask a member of the R Working Group for help if you're
not clear on how to do this. Be warned, though, that if you assign "File" for
some observed data but not all, only the observed data with an assignment for
"File" will show up on the graph.

One other note: The observed data files from the PE data-entry template don't
include the \emph{name} of the compound you're simulating (column:
"Compound"). They do include whether it was a substrate, metabolite, or
inhibitor (column: CompoundID), but not the compound's actual name. For that
reason, try coloring or facetting your data by CompoundID rather than by
Compound if you have observed data. Similarly, if you have an inhibitor and
you have observed data, the inhibitor will be listed as the generic
"inhibitor" here rather than, e.g., "ketoconazole" because the observed data
file doesn't indicate that.

\strong{Other notes:} There's a bug in RStudio (I think) that sometimes
causes the last shape in a legend to vanish when you're looking at the graph
in RStudio, but, if you save the graph, the shape \emph{should} be present.
Let me know if that doesn't happen. -LSh
}
\examples{
data(MDZct)
ct_plot_overlay(ct_dataframe = MDZct, colorBy_column = File)

# Setting the legend labels for color to be more interpretable. Note
# that the order matches the order listed here, not the alphabetical
# order of the files.
ct_plot_overlay(ct_dataframe = MDZct, colorBy_column = File,
                color_labels = c("mdz-5mg-sd-fa1.xlsx" = "fa 1",
                                 "mdz-5mg-sd-fa0_8.xlsx" = "fa 0.8",
                                 "mdz-5mg-sd-fa0_6.xlsx" = "fa 0.6",
                                 "mdz-5mg-sd-fa0_4.xlsx" = "fa 0.4"))

# An example of how you might set the column "File" for a specific
# observed data file:
MyData <- MyData \%>\%
   mutate(File = case_when(ObsFile == "ObservedData1.xlsx" ~ "SimFileA.xlsx",
                           ObsFile == "ObservedData2.xlsx" ~ "SimFileB.xlsx"))



}
