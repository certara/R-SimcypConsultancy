% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ct_plot_overlay.R
\name{ct_plot_overlay}
\alias{ct_plot_overlay}
\title{Overlay multiple data sets onto a single concentration-time graph}
\usage{
ct_plot_overlay(
  sim_obs_dataframe,
  summary_stat = "geomean",
  linear_or_log = "semi-log",
  colorBy = File,
  facet_column1,
  facet_column2,
  floating_facet_scale = FALSE,
  time_range = NA,
  x_axis_interval = NA,
  pad_x_axis = FALSE,
  pad_y_axis = FALSE,
  y_axis_limits_lin = NA,
  y_axis_limits_log = NA,
  save_graph = NA,
  fig_height = 6,
  fig_width = 5,
  include_messages = TRUE
)
}
\arguments{
\item{sim_obs_dataframe}{the data.frame with multiple sets of
concentration-time data. At the moment, this function does not plot
observed data, though; that's still under construction.}

\item{summary_stat}{plot "geomean" (default) for geometric mean
concentrations, "mean" for arithmetic mean concentrations, or "median" for
median concentrations as the main (thickest or only) line for each data
set. If this summary stat is not available in the simulator output, we'll
warn you that we're plotting a different one.}

\item{linear_or_log}{the type of graph to be returned. Options: "semi-log",
"linear", or "both".}

\item{colorBy}{What column in \code{sim_obs_dataframe} should be used for
coloring the lines and/or points on the graph? This should be unquoted,
e.g., \code{colorBy = Tissue}.}

\item{facet_column1}{If you would like to break up your graph into small
multiples, you can break the graphs up by up to two columns in
\code{sim_obs_dataframe}. What should be the 1st column to break up the
data by? This should be unquoted. If \code{floating_facet_scale} is FALSE,
then \code{facet_column1} will make the rows of the output graphs.}

\item{facet_column2}{What should be the 2nd column to break up the data into
small multiples by? This should be unquoted. If \code{floating_facet_scale}
is FALSE, then \code{facet_column2} will make the columns of the output
graphs.}

\item{floating_facet_scale}{TRUE or FALSE for whether to allow the axes for
each facet of a multi-facetted graph to scale freely according to what data
are present. Default is FALSE, which means that all data will be on the
same scale for easy comparison. However, this could mean that some graphs
have lines that are hard to see, so you can set this to TRUE to allow the
axes to shrink or expand according to what data are present for that facet.
Floating axes comes with a trade-off for the looks of the graphs, though:
Setting this to TRUE does mean that your x axis won't have pretty breaks
that are sensible for times in hours and that your y axis won't have minor
ticks.}

\item{time_range}{time range to show relative to the start of the simulation.
  A note on how this differs from \code{\link{ct_plot}}: Since this function
  does allow for multiple files to be plotted, please note that you cannot
  specify a dose number for the time range as you can with \code{ct_plot};
  that's because we wouldn't know which simulation you wanted that dose
  number for. Options that will work here: \describe{

  \item{NA}{entire time range of data}

  \item{a start time and end time in hours}{only data in that time range,
  e.g. \code{c(24, 48)}}}}

\item{x_axis_interval}{Set the x-axis major tick-mark interval. Acceptable
input: any number or leave as NA to accept default values.}

\item{pad_x_axis}{Optionally add a smidge of padding to the left side of the
x axis. If left as FALSE, the y axis will be placed right at the beginning
of your time range. If set to TRUE, there will be a little bit of space
between the y axis and the start of your time range. If you want a
\emph{specific} amount of x axis padding, set this to a number; the default
is 0.02, which adds 2 percent more space to the left side of the axis.}

\item{pad_y_axis}{Similar to the \code{pad_x_axis} argument, optionally add a
smidge of padding to the bottom of the y axis. As with \code{pad_x_axis},
the default (FALSE) is no padding, but you can set this to either TRUE to
get 2 percent more space on the bottom of the y axis or set it to a number
to get a specific amount of padding there.}

\item{y_axis_limits_lin}{Optionally set the Y axis limits for the linear
plot, e.g., \code{c(10, 1000)}. If left as NA, the Y axis limits for the
linear plot will be automatically selected.}

\item{y_axis_limits_log}{Optionally set the Y axis limits for the semi-log
plot, e.g., \code{c(10, 1000)}. Values will be rounded down and up,
respectively, to the nearest order of magnitude. If left as NA, the Y axis
limits for the semi-log plot will be automatically selected.}

\item{save_graph}{optionally save the output graph by supplying a file name
in quotes here, e.g., "My conc time graph.png". If you leave off ".png", it
will be saved as a png file, but if you specify a different file extension,
it will be saved as that file format. Acceptable extensions are "eps",
"ps", "jpeg", "jpg", "tiff", "png", "bmp", or "svg". Leaving this as NA
means the file will not be automatically saved to disk.}

\item{fig_height}{figure height in inches; default is 6}

\item{fig_width}{figure width in inches; default is 5}
}
\value{

}
\description{
\code{ct_plot_overlay} is meant to be used in conjunction with
\code{\link{extractConcTime_mult}} to create single graphs with overlaid
concentration-time data from multiple Simcyp Simulator output files for easy
comparisons. \strong{Notes:} \enumerate{\item{This has not been set up yet to
plot enzyme abundance data, ADAM-model simulations, or observed data.}
\item{Currently, this will only plot arithmetic or geometric mean or median
data and nothing else for each data set. We may expand that in the future,
but those are the only things included for now.}} Really, this function is
generally workable but is admittedly not one of our most maturely developed
functions. Something is probably going to break on you, so, our apologies in
advance, and please email Laura Shireman to describe what happened when it
does inevitably break.
}
\examples{
# Use syntax like this:
# ct_plot_overlay(sim_obs_dataframe = CT, facet_column1 = Compound,
#                 facet_column2 = Tissue)


}
