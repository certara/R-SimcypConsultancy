% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ct_plot_mult.R
\name{ct_plot_mult}
\alias{ct_plot_mult}
\title{Make graphs for multiple Simulator output files at once}
\usage{
ct_plot_mult(
  ct_dataframe,
  obs_to_sim_assignment = NA,
  graph_arrangement = "all together",
  qc_graph = FALSE,
  existing_exp_details = NA,
  figure_type = "percentiles",
  mean_type = "arithmetic",
  linear_or_log = "semi-log",
  time_range = NA,
  x_axis_interval = NA,
  x_axis_label = NA,
  pad_x_axis = TRUE,
  pad_y_axis = TRUE,
  y_axis_limits_lin = NA,
  y_axis_limits_log = NA,
  y_axis_label = NA,
  legend_position = "none",
  legend_label = NA,
  graph_titles = "none",
  graph_title_size = 14,
  graph_labels = TRUE,
  save_graph = NA,
  file_suffix = NA,
  fig_height = 8,
  fig_width = 8,
  ...
)
}
\arguments{
\item{ct_dataframe}{the data.frame with multiple sets of concentration-time
data}

\item{obs_to_sim_assignment}{optionally specify which observed files should
be compared to which simulator files. If left as NA and what you supplied
for \code{ct_dataframe} doesn't already specify which observed data go with
which simulated file, this will assume that \emph{all} observed data goes
with \emph{all} simulated data. To specify, use a named character vector
like this: \code{obs_to_sim_assignment = c("obs data 1.xlsx" =
"mdz-5mg-qd.xlsx", "obs data 2.xlsx" = "mdz-5mg-qd-cancer.xlsx")} If one
observed file needs to match more than one simulated file but not
\emph{all} the simulated files, you can do that by separating the simulated
files with commas, e.g., \code{obs_to_sim_assignment = c("obs data 1.xlsx"
= "mdz-5mg-qd.xlsx, mdz-5mg-qd-fa08.xlsx", "obs data 2.xlsx" =
"mdz-5mg-qd-cancer.xlsx, mdz-5mg-qd-cancer-fa08.xlsx")}. Pay close
attention to the position of commas and quotes there!}

\item{graph_arrangement}{set how to arrange the graphs. Options are
  \describe{\item{"all together"}{(default) for all graphs being nicely
  arranged and aligned together,}

  \item{"separate files"}{to make one output file per simulator file, or}

  \item{"numrows x numcols"}{where you replace "numrows" with the number of
  rows of graphs you'd like and "numcols" with the number of columns. The
  result will be a single, nicely arranged graph. For example, "2 x 4" will
  make a set of graphs with 2 rows and 4 columns. This is the same as the
  option "all together" except with more control.}}

  If you choose "separate files", each Simulator output file will have its
  own graph file, named to match the Simulator output file name and you don't
  need to specify anything for \code{save_graph}. (In fact, anything you
  specify for \code{save_graph} will be ignored.)}

\item{qc_graph}{TRUE or FALSE (default) on whether to create a second copy
of the graphical file(s) where the left panel shows the original graphs and
the right panel shows information about the file used to get the data and
the trial design. This works MUCH faster when you have already used
\code{\link{extractExpDetails_mult}} to get information about how your
simulation or simulations were set up and supply that object to the
argument \code{existing_exp_details}.}

\item{existing_exp_details}{output from \code{\link{extractExpDetails}} or
\code{\link{extractExpDetails_mult}} to be used with \code{qc_graph}}

\item{figure_type}{type of figure to plot. Options are:

  \describe{

  \item{"trial means"}{plots an opaque line for the mean data, lighter lines
  for the mean of each trial of simulated data, and open circles for the
  observed data. If an effector were present, lighter dashed lines indicate
  the mean of each trial of simulated data in the presence of the effector.}

  \item{"percentiles"}{(default) plots an opaque line for the mean data,
  lighter lines for the 5th and 95th percentiles of the simulated data, and
  open circles for the observed data. If an effecter were present, the
  default is dashed lines for the data in the presence of an effector.}

  \item{"percentile ribbon"}{plots an opaque line for the mean data,
  transparent shading for the 5th to 95th percentiles of the simulated data,
  and open circles for the observed data. If an effector were present, the
  default is to show the data without the effector in blue and the data in
  the presence of the effector in red. \strong{NOTE: There is a known bug
  within RStudio that can cause filled semi-transparent areas like you get
  with the "percentile ribbon" figure type to NOT get graphed for certain
  versions of RStudio.} To get around this, within RStudio, go to Tools -->
  Global Options --> General --> Graphics --> And then set "Graphics device:
  backend" to "AGG". Honestly, this is a better option for higher-quality
  graphics anyway!}

  \item{"means only"}{plots a black line for the mean data and, if an
  effector was modeled, a dashed line for the concentration-time data with
  Inhibitor 1.}

  \item{"Freddy"}{Freddy's favorite style of plot with trial means in light
  gray, the overall mean in thicker black, the 5th and 95th percentiles in
  dashed lines, and the observed data in semi-transparent purple-blue points.
  Graphs with an effector present lose the trial means, and the percentiles
  switch to solid, gray lines.}}}

\item{mean_type}{graph "arithmetic" (default) or "geometric" means or
"median" for median concentrations}

\item{linear_or_log}{the type of graph to be returned. Options: "semi-log"
(default), "linear", "both vertical" (graphs are stacked vertically), or
"both horizontal" (graphs are side by side).}

\item{time_range}{time range to show relative to the start of the simulation.
  Options: \describe{

  \item{NA}{(default) entire time range of data}

  \item{a start time and end time in hours}{only data in that time range,
  e.g. \code{c(24, 48)}. Note that there are no quotes around numeric data.}

  \item{"first dose"}{only the time range of the first dose}

  \item{"last dose"}{only the time range of the last dose}

  \item{"penultimate dose"}{only the time range of the 2nd-to-last dose,
  which can be useful for BID data where the end of the simulation extended
  past the dosing interval or data when the substrate was dosed BID and the
  effector was dosed QD}

  \item{a specific dose number with "dose" or "doses" as the prefix}{the time
  range encompassing the requested doses, e.g., \code{time_range = "dose 3"}
  for the 3rd dose or \code{time_range = "doses 1 to 4"} for doses 1 to 4}

  \item{"all obs" or "all observed" if you feel like spelling it out}{Time
  range will be limited to only times when observed data are present.}

  \item{"last dose to last observed" or "last obs" for short}{Time range will
  be limited to the start of the last dose until the last observed data
  point.}

  }}

\item{x_axis_interval}{optionally set the x-axis major tick-mark interval.
Acceptable input: any number or leave as NA to accept default values, which
are generally reasonable guesses as to aesthetically pleasing and
PK-relevant intervals.}

\item{x_axis_label}{optionally supply a character vector or an expression to
use for the x axis label}

\item{pad_x_axis}{optionally add a smidge of padding to the the x axis
(default is TRUE, which includes some generally reasonable padding). If
changed to FALSE, the y axis will be placed right at the beginning of your
time range and all data will end \emph{exactly} at the end of the time
range specified. If you want a \emph{specific} amount of x-axis padding,
set this to a number; the default is \code{c(0.02, 0.04)}, which adds 2\%
more space to the left side and 4\% more to the right side of the x axis.
If you only specify one number, we'll assume that's the percent you want
added to the left side.}

\item{pad_y_axis}{optionally add a smidge of padding to the y axis (default
is TRUE, which includes some generally reasonable padding). As with
\code{pad_x_axis}, if changed to FALSE, the x axis will be placed right at
the bottom of your data, possibly cutting a point in half. If you want a
\emph{specific} amount of y-axis padding, set this to a number; the default
is \code{c(0.02, 0)}, which adds 2\% more space to the bottom and nothing
to the top of the y axis. If you only specify one number, we'll assume
that's the percent you want added to the bottom.}

\item{y_axis_limits_lin}{optionally set the Y axis limits for the linear
plot, e.g., \code{c(10, 1000)}. If left as the default NA, the Y axis
limits for the linear plot will be automatically selected.}

\item{y_axis_limits_log}{optionally set the Y axis limits for the semi-log
plot, e.g., \code{c(10, 1000)}. Values will be rounded down and up,
respectively, to a round number. If left as the default NA, the Y axis
limits for the semi-log plot will be automatically selected.}

\item{y_axis_label}{optionally supply a character vector or an expression to
use for the y axis label}

\item{legend_position}{Specify where you want the legend to be. Options are
"left", "right", "bottom", "top", or "none" (default) if you don't want one
at all. If you include the legend but then some graphs do have a legend and
some graphs do not (e.g., some have effectors and some do not so there's
nothing to put in a legend), the alignment between sets of graphs will be a
bit off.}

\item{legend_label}{optionally indicate on the legend whether the effector is
an inhibitor, inducer, activator, or suppressor. Input will be used as the
label in the legend for the line style and the shape. If left as the
default NA when a legend is included and an effector is present, the label
in the legend will be "Inhibitor".}

\item{graph_titles}{optionally specify titles to be used in the graphs and
specify the order in which the files are graphed or use "none" (default) to
have no titles on your graphs. Input should be a named character vector of
the files in the order you would like and what you want to use for the
title. The file name must \emph{perfectly} match the file name listed in
ct_dataframe or it won't be used. An example of how this might be
specified: \code{graph_titles = c("My file 1.xlsx" = "Healthy volunteers",
"My file 2.xlsx" = "Mild hepatic impairment")}  If you get an order that
you didn't think you specified, please double check that you have specified
the file names \emph{exactly} as they appear in \code{ct_dataframe}.
\strong{CAVEAT:} If you have more than one dataset per file, this is
trickier. However, you can specify titles using the name of the simulator
output file, the compound ID, the tissue, and then the ADAM-model
subsection (use "none" if that doesn't apply here), each separated with a
".". An example: \code{graph_titles = c("my sim
file.xlsx.substrate.plasma.none" = "Midazolam", "my sim file.xlsx.inhibitor
1.plasma.none" = "Ketoconazole")} Please see the "Examples" section for an
example with the dataset MDZ_Keto.}

\item{graph_title_size}{the font size for the graph title if it's included;
default is 14. This also determines the font size of the graph labels.}

\item{graph_labels}{TRUE (default) or FALSE for whether to include labels (A,
B, C, etc.) for each of the small graphs.}

\item{save_graph}{optionally save the output graph by supplying a file name
in quotes here, e.g., "My conc time graph.png"or "My conc time graph.docx".
If you leave off ".png" or ".docx", it will be saved as a png file, but if
you specify a different graphical file extension, it will be saved as that
file format. Acceptable graphical file extensions are "eps", "ps", "jpeg",
"jpg", "tiff", "png", "bmp", or "svg". Leaving this as NA means the file
will not be automatically saved to disk, except when \code{graph_arrangment
= "separate files"}, when anything you specify here will be ignored and it
will be saved by file name anyway. \strong{WARNING:} SAVING TO WORD DOES
NOT WORK ON SHAREPOINT OR THE LARGE FILE STORE. This is a Microsoft
permissions issue, not an R issue. If you temporarily change your working
directory to a local folder, it will work fine and you can copy those files
later back to SharePoint or the Large File Store. We wish we had a better
solution for this!}

\item{file_suffix}{optionally add a file suffix to explain what each graph
it. For example, you might run this function once and with
\code{figure_type = "means only"} and once with \code{figure_type =
"percentiles"}, so you could set file_suffix to, e.g., "means only" for the
former and "percentiles" for the latter, and the graph file names would be
something like "abc-5mg-sd - means only.png" and "abc-5mg-sd -
percentiles.png". This is only used when \code{graph_arrangement =
"separate files"}.}

\item{fig_height}{figure height in inches; default is 8}

\item{fig_width}{figure width in inches; default is 8}

\item{...}{arguments that pass through to \code{\link{ct_plot}}}
}
\value{
a set of arranged ggplot2 graphs and/or saved files of those graphs
}
\description{
This function was designed for making nicely arranged concentration-time
graphs from several Simcyp Simulator output files all together \emph{or} for
making multiple files -- one for each Simulator file -- all at once. Behind
the scenes, it uses the function \code{\link{ct_plot}} to make these graphs,
so it will automatically break up your supplied concentration-time data into
datasets by a) file, b) compound ID, c) tissue, and d) subsection of any
ADAM-model data. If you have more than one dataset per file, the graph titles
won't necessarily be clear, so please pay attention to what data you're
including. If you get unexpected or unclear output, try using
\code{\link{ct_plot_overlay}} to graph your data; it might work better for
what you want to show.
}
\details{
\strong{A note on the order of the graphs:} This function arranges graphs
first by file, then by compound ID, and then by tissue, and all sorting is
alphabetical. However, since sorting alphabetically might not be the optimal
graph arrangement for \emph{your} scenario, you can specify the order of the
graphs using either the \code{graph_titles} argument or, if you're
comfortable with setting factors in R, by making any of File, CompoundID,
Tissue, and subsection_ADAM factor rather than character data and setting the
levels how you wish. If you're unfamiliar with setting factor levels in R and
setting \code{graph_titles} isn't achieving what you want, please ask a
member of the R Working Group for assistance.
}
\examples{

data(MDZct)
ct_plot_mult(ct_dataframe = MDZct)

ct_plot_mult(ct_dataframe = MDZct,
   graph_titles = c("mdz-5mg-sd-fa1.xlsx" = "fa = 1",
                    "mdz-5mg-sd-fa0_8.xlsx" = "fa = 0.8",
                    "mdz-5mg-sd-fa0_6.xlsx" = "fa = 0.6",
                    "mdz-5mg-sd-fa0_4.xlsx" = "fa = 0.4"))


# Graph titles when you have the tricky situation of more than one
# dataset per file
ct_plot_mult(
    ct_dataframe = MDZ_Keto,
    graph_titles = c("mdz-qd-keto-qd.xlsx.substrate.plasma.none" = "Midazolam in plasma",
                     "mdz-qd-keto-qd.xlsx.substrate.blood.none" = "Midazolam in blood",
                     "mdz-qd-keto-qd.xlsx.inhibitor 1.plasma.none" = "Ketoconazole in plasma",
                     "mdz-qd-keto-qd.xlsx.inhibitor 1.blood.none" = "Ketoconazole in blood"))

}
