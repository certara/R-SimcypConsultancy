% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extractExpDetails_mult.R
\name{extractExpDetails_mult}
\alias{extractExpDetails_mult}
\title{Extract experimental details for multiple files at once}
\usage{
extractExpDetails_mult(
  sim_data_files = NA,
  exp_details = "all",
  existing_exp_details = "none",
  overwrite = FALSE,
  annotate_output = TRUE,
  save_output = NA,
  ...
)
}
\arguments{
\item{sim_data_files}{a character vector of simulator output files, each in
quotes and encapsulated with \code{c(...)}, or NA to extract experimental
details for \emph{all} the Excel files in the current folder. Example of
acceptable input: \code{c("sim1.xlsx", "sim2.xlsx")}. If some of your Excel
files are not regular simulator output, e.g. they are sensitivity analyses
or a file where you were doing some calculations, those files will be
skipped.}

\item{exp_details}{experimental details you want to extract from the
  simulator output files using the function \code{\link{extractExpDetails}}.
  Options are \describe{

  \item{"Summary tab"}{Extract details only from the "Summary tab"}

  \item{"Input Sheet"}{Extract details only from the "Input Sheet" tab}

  \item{"population tab"}{Extract details about the population used (data
  come from the tab with the same name as the population simulated)}

  \item{"Simcyp inputs"}{Extract all the details that you normally fill out
  on the "Simcyp inputs (and QC)" tab of a compound data sheet plus trial
  design information}

  \item{"workspace"}{Extract an extremely limited set of details directly
  from the Simcyp Simulator workspace files. The set of possible details may
  be viewed by entering \code{view(AllWorkspaceDetails)} in the console. This
  \emph{only} works when each workspace file name perfectly matches its
  corresponding Excel results file name and is located in the same folder.
  Otherwise, this step in the data extraction will be skipped. UNDER
  CONSTRUCTION.}

  \item{"all"}{Extract all possible parameters (default). This is the slowest
  option in terms of processing time because it must read multiple Excel
  tabs.}

  \item{a string of the specific parameters you want, each in quotes and
  encapsulated with \code{c(...)},}{For a complete list, type
  \code{data(ExpDetailDefinitions); view(ExpDetailDefinitions)} into the
  console. Parameters are reported with a suffix depending on which compound
  they pertain to: "_sub" for the substrate, "_met1" for the primary
  metabolite, "_met2" for the second primary metabolite, "_secmet" for the
  secondary metabolite, "_inhib" for the 1st inhibitor or inducer listed,
  "_inhib2" for the 2nd inhibitor or inducer listed, or "_inh1met" for the
  inhibitor 1 metabolite. An example of acceptable input: \code{c("pKa1_sub",
  "fa_inhib2", "Regimen_sub")}}}

  \strong{Note:} While information about custom dosing regimens \emph{can} be
  extracted by the function \code{\link{extractExpDetails}}, that information
  cannot easily be made to fit with the rest of the output for
  \code{extractExpDetails_mult}. That's because each simulator file and
  compound with a custom-dosing regimen will have its own data.frame with the
  time, time units, dose number, dose amount, dose units, and dose route. For
  that reason, custom-dosing information will largely be ignored here.}

\item{existing_exp_details}{(optional) a data.frame that contains previously
extracted experimental details. If this object \emph{does} exist, it should
NOT be in quotes, e.g. \code{existing_exp_details = MyDeets}. Because we
can see scenarios where you might want to extract some experimental details
and then run more simulations for comparisons, this function will
\emph{add} data to that data.frame. It will \emph{not} overwrite existing
data unless \code{overwrite} is set to TRUE.}

\item{overwrite}{TRUE or FALSE (default) on whether to re-extract the
experimental details from output files that are already included in
\code{existing_exp_details}. Since pulling data from Excel files is slow,
by default, this will \emph{not} overwrite existing data and instead will
only add data from any Excel files that aren't already included. A
situation where you might want to set this to TRUE would be when you have
changed input parameters for simulations and re-run them OR when you have
extracted only some of the possible experimental details and you now would
like more experimental details from each simulator output file.}

\item{annotate_output}{TRUE (default) or FALSE on whether to transpose the
rows and columns in the output, making the output table longer instead of
wider, and adding columns to the output for a) which compound the
information pertains to (substrate, inhibitor, etc.), b) which section of
the Simcyp Simulator this detail is found in (physchem, absorption,
distribution, etc.), c) notes describing what the detail is, and d) which
sheet in the Excel file the information was pulled from. Please see
\code{annotateDetails} for ways to sift through and organize this output to
find what you need.}

\item{save_output}{optionally save the output by supplying a csv or Excel
file name in quotes here, e.g., "Simulation details.csv" or "Simulation
details.xlsx". If you leave off the file extension, it will be saved as a
csv file.}
}
\value{
Returns a data.frame of experimental details for simulator files
}
\description{
\code{extractExpDetails_mult} takes a character vector of Simcyp Simulator
output files -- or all the Excel files in the current directory if no files
are specified -- and collects experimental details for the simulations into a
single table. It optionally saves that table to a csv or Excel file.
}
\examples{

extractExpDetails_mult(
    sim_data_files =
        c("Example simulator output - SD MDZ + MD RTV.xlsx",
          "Example simulator output - MDZ + metabolites.xlsx",
          "Example simulator output - met1 met2 sec met1 inhib1.xlsx",
          "Example simulator output - met1 met2 sec met1.xlsx"),
    exp_details = "all",
    save_output = "My experimental details.csv")
 
}
