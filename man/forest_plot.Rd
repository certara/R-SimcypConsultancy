% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forest_plot.R
\name{forest_plot}
\alias{forest_plot}
\title{Create a forest plot}
\usage{
forest_plot(
  forest_dataframe,
  y_axis_labels,
  y_order = NA,
  PKparameters = NA,
  observed_PK = NA,
  facet_column_x,
  mean_type = "geometric",
  variability_type = "90\% CI",
  include_dose_num = TRUE,
  y_axis_title = "none",
  prettify_compound_names = NA,
  x_axis_limits = NA,
  x_axis_label = NA,
  x_axis_number_type = "ratios",
  x_order = NA,
  dose_units = "mg",
  legend_position = "none",
  color_set = "grays",
  point_shape = c(24, 21),
  graph_title = NA,
  graph_title_size = 14,
  pad_y_axis = TRUE,
  save_graph = NA,
  fig_height = 6,
  fig_width = 5
)
}
\arguments{
\item{forest_dataframe}{a data.frame with extracted forest-plot data,
generated from running \code{\link{extractForestData}} on Simulator output
files or a csv or Excel file with the same data. (If it's an Excel file, it
must have only one tab.)}

\item{y_axis_labels}{a column in \code{forest_dataframe} (unquoted) or a
named character vector (each item in quotes) to use for labeling the
simulations on the y axis. In all forest plots, the y axis will be broken
up by the simulation file name behind the scenes, but that's likely not the
prettiest way to label the y axis, which is where this argument comes in.
If you already have a column in \code{forest_dataframe} with the label you
want -- for example the column PerpCompound when your drug of interest is a
victim or VictimCompound when it's the effector -- use that by specifying,
for example, \code{y_axis_labels = PerpCompound}. If you would like to
manually specify which simulation file should be labeled what here, do so
with a named character vector, e.g.,
\code{y_axis_labels = c("myfile1.xlsx" = "itraconazole", "myfile2.xlsx" =
"efavirenz")}. If left as NA, we'll use the simulation file names. You can
optionally make the compound names prettier with the argument
\code{prettify_compound_names}.}

\item{y_order}{optionally set the order of simulation files on the y axis. If
  \code{y_order} is left as NA, the y axis will be sorted according to the
  AUC ratio with inhibitors on top and inducers on the bottom. If you would
  like to use some other order, there are four possible ways to
  specify this: \describe{

  \item{"as is"}{If you're already happy with the order of things in the
  input data \code{forest_dataframe}, then setting \code{y_order = "as is"}
  will keep things in exactly the same order.}

  \item{a character vector of file names}{e.g., \code{y_order =
  c("myfile1.xlsx", "myfile2.xlsx")}. The file names will be automatically
  replaced with whatever you specified for \code{y_axis_labels}.}

  \item{"strongest inhibitor to strongest inducer"}{Sort the simulations
  from top to bottom by AUC ratio from the strongest inhibitor (largest AUC
  ratio) to the strongest inducer (smallest AUC ratio). (The Cmax ratio will
  be used if you didn't include AUC.) This is the default option and what you
  get when \code{y_order} is left as NA.}

  \item{"strongest inducer to strongest inhibitor"}{Sort the simulations
  from top to bottom by AUC ratio from the strongest inducer (smallest AUC
  ratio) to the strongest inhibitor (largest AUC ratio). (The Cmax ratio will
  be used if you didn't include AUC.)}

  }}

\item{PKparameters}{optionally specify which PK parameters in
\code{forest_dataframe} to use as input. If left as NA, all the PK
parameters included in \code{forest_dataframe} will be included. If you try
to include a parameter that's not already present in
\code{forest_dataframe}, it will be ignored. User a character vector here,
e.g., \code{PKparameters = c("AUCinf_dose1", "Cmax_dose1")}}

\item{observed_PK}{observed PK data, laid out just like
\code{forest_dataframe} with the same columns. For the column File, list
the simulated file you'd like those observed data to be graphed next to.}

\item{facet_column_x}{optionally break up the graph horizontally into small
multiples. The designated column name should be unquoted, e.g.,
\code{facet_column_x = Dose_sub}}

\item{mean_type}{type of mean to graph; options are "geometric" (default),
"arithmetic", or "median", but this only works when those data are included
in \code{forest_dataframe}.}

\item{variability_type}{type of variability to show as whiskers; options are
"90\% CI" (default), "95\% CI", "5th to 95th percentiles", "range",
"geometric CV", "arithmetic CV", or "standard deviation" ("sd" is also ok
for that last one).}

\item{include_dose_num}{TRUE (default) or FALSE on whether to include the
dose number when listing the PK parameter. By default, the parameter will
be labeled, e.g., "Dose 1 Cmax ratio" or "Last dose AUCtau ratio", but,
especially if you only have a single-dose regimen, you might not want that.
To make the parameters be only, e.g., "Cmax ratio" or "AUCtau ratio", set
this to FALSE.}

\item{y_axis_title}{optionally specify a vertical title to be displayed to
the left of the y axis. Example: \code{y_axis_title = "Effector
co-administered with Drug X"}. Default ("none") leaves off any y-axis title.}

\item{prettify_compound_names}{NA (default), TRUE, or FALSE on whether to
make any compound names included in \code{y_axis_labels} prettier. This was
designed for simulations where the substrates or effectors are among the
standard options for the simulator, and leaving
\code{prettify_compound_names = TRUE} will make the name of those compounds
something more human readable. For example, "SV-Rifampicin-MD" will become
"rifampicin", and "Sim-Midazolam" will become "midazolam". If you don't
specify this, we'll prettify if you supply a column name for
\code{y_axis_labels} and we *won't* prettify if you supply a named
character vector there.}

\item{x_axis_limits}{the x axis limits to use; default is 0.06 to 12.}

\item{x_axis_label}{optionally supply a character vector or an expression to
use for the x axis label}

\item{x_axis_number_type}{set the x axis number type to be "ratios"
(default), "percents" (converts the ratios to a percent), or "keep trailing
zeroes" (still uses ratios but, unlike the default, guesses at a reasonable
number of digits to include based on the range of the data and includes
trailing zeroes as necessary)}

\item{x_order}{optionally specify the order in which the x-axis facets should
appear. For example, if you \code{facet_column_x} is the dosing regimen and
the values there are "QD" and "BID", the default will be to show them in
alphabetical order. If you want "QD" to show up first, though, set the
order with \code{x_order = c("QD", "BID")}}

\item{dose_units}{the units used in dosing, which only applies if you set
\code{facet_column_x}, to Dose_sub or Dose_inhib. In that situation,
setting the dose units here will automatically add those units to the
appropriate graph labels. This way, the graph label will be, e.g., "50 mg"
and "100 mg" instead of just "50" and "100". This just helps make it
clearer what the numbers represent. If you specify anything other than
Dose_sub or Dose_inhib for \code{facet_column_x}, this will be ignored.}

\item{legend_position}{specify where you want the legend to be. Options are
"left", "right", "bottom", "top", or "none" (default) if you don't want one
at all.}

\item{color_set}{the set of colors to use for shading the graph background to
indicate the level of interaction depicted. Options are "grays" (default),
"yellow to red" (makes graphs like Figure 1 of
\href{https://ascpt.onlinelibrary.wiley.com/doi/10.1002/psp4.12864}{Chen
Jones 2022 CPT, doi 10.1002/psp4.12864}), "none" for no shading at all, or
a named character vector of the colors you want for each interaction level,
e.g., \code{color_set = c("insignificant" = "white", "weak" = "gray90",
"moderate" = "gray75", strong = "gray50")}. The cutoff values listed match
those in "Clinical Drug Interaction Studies -- Cytochrome P450 Enzyme- and
Transporter-Mediated Drug Interactions: Guidance for industry", US Food and
Drug Administration Center for Drug Evaluation and Research, 2020, p. 19.}

\item{point_shape}{the shape of the points to show for the center statistic
(e.g., the geometric mean). The default is to show a white triangle for
observed data and a white circle for simulated data, so \code{point_shape =
c(24, 21)}. Any shapes used in R graphs will work; see options by typing
\code{ggpubr::show_point_shapes()} into the console. If you have both
simulated and observed data, enter two shapes with the first being the
shape for the observed data and the second being the shape for the
simulated data. If you have only simulated data, enter only one. If you
enter more shapes than your graph requires, the extras will be ignored.}

\item{graph_title}{optionally specify a title that will be centered across
the graph}

\item{graph_title_size}{the font size for the graph title if it's included;
default is 14.}

\item{pad_y_axis}{optionally add a smidge of padding to the y axis (default
is TRUE, which includes some generally reasonable padding). If set to
FALSE, the y axis tick marks will be placed closer to the top and bottom of
your data. If you want a \emph{specific} amount of y-axis padding, set this
to a number; the default is \code{c(0.2, 0)}, which adds 20\% more space to
the bottom and nothing to the top of the y axis. If you only specify one
number, we'll assume that's the percent you want added to the bottom.}

\item{save_graph}{optionally save the output graph by supplying a file name
in quotes here, e.g., "My conc time graph.png" or "My conc time
graph.docx". If you leave off ".png" or ".docx" from the file name, it will
be saved as a png file, but if you specify a different graphical file
extension, it will be saved as that file format. Acceptable graphical file
extensions are "eps", "ps", "jpeg", "jpg", "tiff", "png", "bmp", or "svg".
Leaving this as NA means the file will not be saved to disk.}

\item{fig_height}{figure height in inches; default is 6}

\item{fig_width}{figure width in inches; default is 5}
}
\value{
Output is a graph.
}
\description{
\code{forest_plot} creates a forest plot of AUC and Cmax ratios. Please use
the function \code{\link{extractForestData}} or \code{\link{pksummary_mult}}
(set the argument "extract_forest_data" to TRUE) to generate the input data
for \code{forest_dataframe}. In the graph, data will be broken up on the y
axis by the simulation file name and, optionally, anything you specify for
\code{facet_column_x}, which will be broken up along the x axis. Since file
names do not generally make the most lovely of y axis labels, please use the
argument \code{y_axis_labels} to specify how you'd like your y
axis to look. \strong{If you're a little confused here or you're just the
kind of person who prefers to wing it rather than reading the instructions
when assembling furniture, we recommend skipping to the end of this help file
and trying out the examples to see what we mean.}
}
\examples{

# We'll use some example forest-plot data for the substrate bufuralol
# with various effectors. To start, we'll use all the default settings.
forest_plot(forest_dataframe = BufForestData_20mg)

# You can used the argument y_axis_labels to specify what to use for the
# y axis labels instead of the simulation file names. One option: Use a
# named character vector to list the file names and what you want to
# show instead. This can be as verbose as you like, and it's ok to use
# "\n" for a new line if you want.
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = c("buf-20mg-sd-fluv-36mg-qd.xlsx" = "fluvoxamine",
                              "buf-20mg-sd-itra-200mg-qd.xlsx" = "itraconazole",
                              "buf-20mg-sd-quin-200mg-qd.xlsx" = "quinidine",
                              "buf-20mg-sd-tic-219mg-bid.xlsx" = "ticlopidine\nSingh et al. 2017 study"))

# Or use a different column in forest_dataframe to specify y_axis_labels.
# Please note that there must be one unique value in y_axis_labels for
# each simulation file.
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound)

# By default, the graph will show the strongest inhibitors on top and
# the strongest inducers on the bottom, sorted by their AUC GMR. However,
# if you liked the order you already had things in whatever you supplied
# for forest_dataframe, you can tell the forest_plot function not to change
# that by setting y_order to "as is".
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            y_order = "as is")

# If it would be sensible to break up your graph by a column in
# forest_dataframe, you can do that with the argument facet_column_x. We'll
# switch to some example data with two dose levels here.
forest_plot(forest_dataframe = BufForestData,
            y_axis_labels = PerpCompound,
            facet_column_x = Dose_sub)

# Or break up your graph by the PK parameter shown. 
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            facet_column_x = PKparameter)
            
# If what you supplied for forest_dataframe includes other statistics, 
# you can graph those instead of the default, which is the geometric 
# mean (point) and geometric 90 percent confidence interval (error bars). 
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            mean_type = "median", 
            variability_type = "range")

# You can compare observed PK data as long as they are formatted the same
# way as the simulated data. Here's an example. 
view(BufObsForestData_20mg)
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            observed_PK = BufObsForestData_20mg)

# Here are some options for modifying the aesthetics of your graph:

# -- Don't include "Dose 1" or "Last dose" in the PK parameter names.
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            include_dose_num = FALSE)
            
# -- Add an overall graph title and a y axis title to make it clear that 
# we're looking at the effects of various perpetrators on bufuralol PK (at 
# least, that's what we're doing in this example). 
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            include_dose_num = FALSE, 
            y_axis_title = "Perpetrator", 
            graph_title = "Effects of various DDI perpetrator\ndrugs on bufuralol PK")

# -- Adjust the x axis limits with x_axis_limits
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            x_axis_limits = c(0.9, 5))

# -- Include a legend for the shading
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            facet_column_x = Dose_sub,
            legend_position = "bottom")

# -- Change the shading to be like in Chen Jones 2022 CPT
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            facet_column_x = Dose_sub,
            legend_position = "bottom",
            color_set = "yellow to red")

# -- Or make the shading disappear
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            facet_column_x = Dose_sub,
            legend_position = "bottom",
            color_set = "none")

# -- Or specify exactly which colors you want for which interaction level
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound, 
            facet_column_x = Dose_sub,
            legend_position = "bottom",
            color_set = c("negligible" = "white", "weak" = "#C6CDF7",
                          "moderate" = "#7294D4", strong = "#E6A0C4"))

# -- Make the compound names match *exactly* what was in the simulator file
# rather than being automatically prettified
forest_plot(forest_dataframe = BufForestData_20mg,
            y_axis_labels = PerpCompound,
            facet_column_x = Dose_sub,
            prettify_compound_names = FALSE)
}
